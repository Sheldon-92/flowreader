name: Deploy to Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Run CI checks first (reuse CI workflow)
  ci-check:
    name: CI Verification
    uses: ./.github/workflows/ci.yml

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: ci-check
    if: ${{ always() && (needs.ci-check.result == 'success' || github.event.inputs.force_deploy == 'true') }}
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.preview-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Install dependencies
        run: npm ci

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: staging

      - name: Deploy to Vercel Staging
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT
          echo "🚀 Deployed to: $url"

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.preview-url }}',
              description: 'Staging deployment successful'
            });

  smoke-tests:
    name: Staging Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always() && needs.deploy-staging.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install curl and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

      - name: Health Check
        run: |
          STAGING_URL="${{ needs.deploy-staging.outputs.preview-url }}"
          echo "Testing health endpoint: $STAGING_URL/api/health"

          # Health check with retry logic
          for i in {1..5}; do
            if curl -f "$STAGING_URL/api/health"; then
              echo "✅ Health check passed"
              break
            else
              echo "⏳ Health check failed (attempt $i/5), retrying in 10s..."
              sleep 10
            fi
          done

      - name: API Endpoint Tests
        run: |
          STAGING_URL="${{ needs.deploy-staging.outputs.preview-url }}"

          echo "Running API endpoint tests against: $STAGING_URL"

          # Test public endpoints
          echo "Testing public endpoints..."

          # Health endpoint
          response=$(curl -s -w "%{http_code}" "$STAGING_URL/api/health")
          if [[ "$response" == *"200" ]]; then
            echo "✅ Health endpoint working"
          else
            echo "❌ Health endpoint failed: $response"
            exit 1
          fi

          # Test protected endpoint (should return 401)
          response_code=$(curl -s -w "%{http_code}" -o /dev/null "$STAGING_URL/api/books")
          if [[ "$response_code" == "401" ]]; then
            echo "✅ Protected endpoint properly secured"
          else
            echo "❌ Protected endpoint security issue: $response_code"
            exit 1
          fi

      - name: Frontend Smoke Test
        run: |
          STAGING_URL="${{ needs.deploy-staging.outputs.preview-url }}"

          echo "Testing frontend availability..."

          # Test main page loads
          response_code=$(curl -s -w "%{http_code}" -o /dev/null "$STAGING_URL")
          if [[ "$response_code" == "200" ]]; then
            echo "✅ Frontend loading successfully"
          else
            echo "❌ Frontend failed to load: $response_code"
            exit 1
          fi

      - name: Performance Check
        run: |
          STAGING_URL="${{ needs.deploy-staging.outputs.preview-url }}"

          echo "Running basic performance checks..."

          # Test response time
          response_time=$(curl -w "%{time_total}" -s -o /dev/null "$STAGING_URL/api/health")
          echo "Health endpoint response time: ${response_time}s"

          # Fail if response time > 5 seconds
          if (( $(echo "$response_time > 5.0" | bc -l) )); then
            echo "❌ Response time too slow: ${response_time}s"
            exit 1
          else
            echo "✅ Response time acceptable: ${response_time}s"
          fi

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests]
    if: always()

    steps:
      - name: Set deployment status
        id: status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] && [ "${{ needs.smoke-tests.result }}" == "success" ]; then
            echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
            echo "message=Staging deployment completed successfully" >> $GITHUB_OUTPUT
            echo "color=success" >> $GITHUB_OUTPUT
          else
            echo "status=❌ FAILED" >> $GITHUB_OUTPUT
            echo "message=Staging deployment failed" >> $GITHUB_OUTPUT
            echo "color=failure" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment summary
        run: |
          echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ needs.deploy-staging.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment:** ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Smoke Tests:** ${{ needs.smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy-staging.result }}" == "success" ] && [ "${{ needs.smoke-tests.result }}" == "success" ]; then
            echo "✅ **Ready for production deployment**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Not ready for production - fix issues before deploying**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.status.outputs.status }}';
            const url = '${{ needs.deploy-staging.outputs.preview-url }}';
            const message = `
            ## 🚀 Staging Deployment ${status}

            **Preview URL:** ${url}
            **Deployment Status:** ${{ needs.deploy-staging.result }}
            **Tests Status:** ${{ needs.smoke-tests.result }}

            ${status.includes('SUCCESS') ? '✅ Ready for review!' : '❌ Please fix issues before merging'}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });