name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      confirmation:
        description: 'Type DEPLOY to confirm production deployment'
        required: true
        type: string
      skip_staging_check:
        description: 'Skip staging verification (NOT RECOMMENDED)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  pre-deployment-checks:
    name: Pre-deployment Verification
    runs-on: ubuntu-latest

    steps:
      - name: Validate deployment confirmation
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "DEPLOY" ]; then
            echo "‚ùå Deployment confirmation failed. Please type 'DEPLOY' to confirm."
            exit 1
          fi
          echo "‚úÖ Deployment confirmed"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify branch is main
        run: |
          if [ "${{ github.ref_name }}" != "main" ]; then
            echo "‚ùå Production deployments must be from main branch"
            echo "Current branch: ${{ github.ref_name }}"
            exit 1
          fi
          echo "‚úÖ Deploying from main branch"

      - name: Check for recent commits
        run: |
          # Check if the latest commit is less than 24 hours old
          latest_commit_time=$(git show -s --format=%ct HEAD)
          current_time=$(date +%s)
          time_diff=$((current_time - latest_commit_time))
          hours_diff=$((time_diff / 3600))

          if [ $hours_diff -gt 24 ]; then
            echo "‚ö†Ô∏è  Warning: Latest commit is $hours_diff hours old"
            echo "Consider deploying more recent changes"
          else
            echo "‚úÖ Recent commit (${hours_diff}h ago)"
          fi

  staging-verification:
    name: Verify Staging Environment
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: ${{ !github.event.inputs.skip_staging_check }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Verify staging deployment
        run: |
          echo "Verifying staging environment before production deployment..."

          # Get the latest staging deployment URL
          # This would need to be implemented based on your deployment tracking
          STAGING_URL="https://flowreader-git-main-yourorg.vercel.app"

          echo "Testing staging at: $STAGING_URL"

          # Health check
          if curl -f "$STAGING_URL/api/health" > /dev/null 2>&1; then
            echo "‚úÖ Staging health check passed"
          else
            echo "‚ùå Staging health check failed"
            exit 1
          fi

          # Additional staging tests
          echo "Running staging verification tests..."
          # Add more comprehensive staging tests here

  production-deployment:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, staging-verification]
    if: always() && needs.pre-deployment-checks.result == 'success' && (needs.staging-verification.result == 'success' || github.event.inputs.skip_staging_check == 'true')
    environment:
      name: production
      url: https://flowreader.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Install dependencies
        run: npm ci

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: production

      - name: Create deployment backup reference
        id: backup
        run: |
          # Get current production deployment for rollback
          current_deployment=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep "flowreader" | head -1 | awk '{print $2}')
          echo "backup-deployment=$current_deployment" >> $GITHUB_OUTPUT
          echo "üì¶ Backup deployment reference: $current_deployment"

      - name: Deploy to Production
        id: deploy
        run: |
          echo "üöÄ Deploying to production..."
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production-url=$url" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to: $url"

      - name: Wait for deployment propagation
        run: |
          echo "‚è≥ Waiting for deployment to propagate..."
          sleep 60

  post-deployment-verification:
    name: Production Health Checks
    runs-on: ubuntu-latest
    needs: production-deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Production Health Check
        id: health-check
        run: |
          PROD_URL="${{ needs.production-deployment.outputs.production-url }}"
          echo "Running production health checks on: $PROD_URL"

          # Health endpoint check with retries
          for i in {1..10}; do
            if curl -f "$PROD_URL/api/health" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed (attempt $i)"
              echo "health-status=success" >> $GITHUB_OUTPUT
              break
            else
              echo "‚è≥ Health check failed (attempt $i/10), retrying in 30s..."
              if [ $i -eq 10 ]; then
                echo "‚ùå Health check failed after 10 attempts"
                echo "health-status=failed" >> $GITHUB_OUTPUT
                exit 1
              fi
              sleep 30
            fi
          done

      - name: API Functionality Test
        run: |
          PROD_URL="${{ needs.production-deployment.outputs.production-url }}"

          echo "Testing critical API endpoints..."

          # Test health endpoint response
          health_response=$(curl -s "$PROD_URL/api/health")
          if echo "$health_response" | grep -q "status.*ok\|healthy"; then
            echo "‚úÖ Health endpoint returns valid response"
          else
            echo "‚ùå Health endpoint response invalid: $health_response"
            exit 1
          fi

          # Test protected endpoint (should return 401)
          protected_status=$(curl -s -w "%{http_code}" -o /dev/null "$PROD_URL/api/books")
          if [ "$protected_status" = "401" ]; then
            echo "‚úÖ Protected endpoints properly secured"
          else
            echo "‚ùå Protected endpoint security issue: $protected_status"
            exit 1
          fi

      - name: Performance Baseline Check
        run: |
          PROD_URL="${{ needs.production-deployment.outputs.production-url }}"

          echo "Checking production performance baseline..."

          # Test response times
          health_time=$(curl -w "%{time_total}" -s -o /dev/null "$PROD_URL/api/health")
          echo "Health endpoint response time: ${health_time}s"

          # Fail if response time > 3 seconds for production
          if (( $(echo "$health_time > 3.0" | bc -l) )); then
            echo "‚ùå Production response time too slow: ${health_time}s"
            exit 1
          else
            echo "‚úÖ Performance baseline met: ${health_time}s"
          fi

      - name: Database Connectivity Check
        run: |
          PROD_URL="${{ needs.production-deployment.outputs.production-url }}"

          echo "Verifying database connectivity..."

          # Test an endpoint that requires database access
          # This should be customized based on your actual endpoints
          db_status=$(curl -s -w "%{http_code}" -o /dev/null "$PROD_URL/api/health/database" || echo "404")

          if [ "$db_status" = "200" ]; then
            echo "‚úÖ Database connectivity verified"
          elif [ "$db_status" = "404" ]; then
            echo "‚ö†Ô∏è  Database health endpoint not found (may be expected)"
          else
            echo "‚ùå Database connectivity issue: $db_status"
            exit 1
          fi

  rollback-on-failure:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    needs: [production-deployment, post-deployment-verification]
    if: always() && needs.production-deployment.result == 'success' && needs.post-deployment-verification.result == 'failure'

    steps:
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Rollback to previous deployment
        run: |
          echo "üîÑ Rolling back to previous deployment..."
          backup_deployment="${{ needs.production-deployment.outputs.backup-deployment }}"

          if [ -n "$backup_deployment" ]; then
            vercel promote "$backup_deployment" --token=${{ secrets.VERCEL_TOKEN }}
            echo "‚úÖ Rolled back to: $backup_deployment"
          else
            echo "‚ùå No backup deployment found for rollback"
            exit 1
          fi

      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          sleep 30

          # Test health after rollback
          if curl -f "https://flowreader.vercel.app/api/health" > /dev/null 2>&1; then
            echo "‚úÖ Rollback verification successful"
          else
            echo "‚ùå Rollback verification failed"
            exit 1
          fi

  deployment-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [production-deployment, post-deployment-verification, rollback-on-failure]
    if: always()

    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [ "${{ needs.production-deployment.result }}" == "success" ] && [ "${{ needs.post-deployment-verification.result }}" == "success" ]; then
            echo "status=‚úÖ SUCCESS" >> $GITHUB_OUTPUT
            echo "message=Production deployment completed successfully" >> $GITHUB_OUTPUT
            echo "color=success" >> $GITHUB_OUTPUT
          elif [ "${{ needs.rollback-on-failure.result }}" == "success" ]; then
            echo "status=üîÑ ROLLED BACK" >> $GITHUB_OUTPUT
            echo "message=Deployment failed and was rolled back successfully" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          else
            echo "status=‚ùå FAILED" >> $GITHUB_OUTPUT
            echo "message=Production deployment failed" >> $GITHUB_OUTPUT
            echo "color=failure" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment summary
        run: |
          echo "## üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://flowreader.vercel.app" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-checks:** ${{ needs.pre-deployment-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging Verification:** ${{ needs.staging-verification.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production Deploy:** ${{ needs.production-deployment.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Checks:** ${{ needs.post-deployment-verification.result }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.rollback-on-failure.result }}" != "skipped" ]; then
            echo "- **Rollback:** ${{ needs.rollback-on-failure.result }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create GitHub release (on success)
        if: needs.production-deployment.result == 'success' && needs.post-deployment-verification.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${new Date().toISOString().slice(0,10).replace(/-/g,'')}`,
              name: `Production Release ${new Date().toISOString().slice(0,10)}`,
              body: `
              ## üöÄ Production Deployment

              **Deployed at:** ${new Date().toISOString()}
              **Commit:** ${context.sha}
              **Actor:** ${context.actor}

              ### Features
              - Latest FlowReader updates deployed to production
              - All health checks passed
              - Performance baseline met

              ### Environment
              - **URL:** https://flowreader.vercel.app
              - **Environment:** Production
              - **Vercel Project:** FlowReader
              `,
              draft: false,
              prerelease: false
            });

            console.log(`Release created: ${release.html_url}`);

  security-scan-production:
    name: Post-deployment Security Scan
    runs-on: ubuntu-latest
    needs: [production-deployment, post-deployment-verification]
    if: needs.production-deployment.result == 'success' && needs.post-deployment-verification.result == 'success'

    steps:
      - name: Security headers check
        run: |
          PROD_URL="https://flowreader.vercel.app"

          echo "Checking security headers..."

          # Check for important security headers
          headers=$(curl -s -I "$PROD_URL")

          security_headers=(
            "X-Content-Type-Options"
            "X-Frame-Options"
            "X-XSS-Protection"
            "Referrer-Policy"
          )

          for header in "${security_headers[@]}"; do
            if echo "$headers" | grep -i "$header" > /dev/null; then
              echo "‚úÖ $header header present"
            else
              echo "‚ö†Ô∏è  $header header missing"
            fi
          done

      - name: Basic penetration test
        run: |
          PROD_URL="https://flowreader.vercel.app"

          echo "Running basic security tests..."

          # Test for common vulnerabilities
          echo "Testing for SQL injection patterns..."
          sqli_status=$(curl -s -w "%{http_code}" -o /dev/null "$PROD_URL/api/books?id=1';DROP TABLE users;--")
          if [ "$sqli_status" = "400" ] || [ "$sqli_status" = "404" ]; then
            echo "‚úÖ SQL injection protection working"
          else
            echo "‚ö†Ô∏è  Unexpected response to SQL injection test: $sqli_status"
          fi

          echo "‚úÖ Basic security scan completed"